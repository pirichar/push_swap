Donc il faudra que j'aille un fichier qui s'apelle l4p
dans ça je devrais mettre les sous fonction de ça


OLD BUBBLE SORT MAIN:
	
	int i;
	i = 1;

	while(i < argc)
	{
		printf("----THE BEFORE PRINT------");
		printf("This is argv[%i] = %s\n", i, argv[i]);
		i++;
	}
	char *tmp;
	i = 1;
	while(i < argc - 1)
	{
		if (ft_atol(argv[i]) > ft_atol(argv[i + 1]))
			{
				tmp = argv[i + 1];
				argv[i + 1] = argv[i];
				argv[i] = tmp;
				i = 1;
			}
		else 
			i++;
	}
	i = 1 ;
	while(i < argc)
	{
		printf("----THE AFTER PRINT----");
		printf("This is argv[%i] = %s\n", i, argv[i]);
		i++;
	}

Int main

	parse argv
		l4p	- Vérifie si je n'ai QUE DES INTS DANS MON INPUT et qu<ils ne sont pas les mêmes
			static long ft_atoi
			static int check_is_int
		Check_if_in_order - vérifie si c'Est déjà dans le bon ordrer 
			-bubble sort ou quelque chose comme ça ? 
			-If in order just return nothing
		Quantify the array passed ?
			- gather the input in an array ?
			- Check if its greater then 3 ; 5 ; 100 **what ever the numbers are**
		Trigger the right sort method ?
			-Sort for less then X 
			- Sor for more then X 

	init both arrays ?
		Create an array of the size of argc -1
			-Start working with those
	

probablement que j'auirais une fonction push et une swap ? 


Je devrai peut-être aussi faire une autre sous fonction pour les 2 premier check ou les inclure




Selon mick :


1 - trouve le size
2- INit 3 stack 
3- faire un struck pour les stacks avec un int * et un count en int ; comme ca je vais avoir la valeur de mon stack et pouvoir men servir 
4- penser que je peux faire un small sort et mettre plusieurs m/thodes de sort dedans 
5- index 0 = la fin et index size -1 est le 
6- front est le dessus de la pile le dernier item déposé 
7- back est le premier item de la pile 
LE PREMIER ARGUMENT DU MAIN EST LE DERNIER DONC QUAND JE INIT JE DOIS PUSH BACK 




Donc :

Main 
	check if more then one argument and parse the input

	initits the arrays 

	Check if in order

